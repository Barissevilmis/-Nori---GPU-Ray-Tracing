cmake_minimum_required (VERSION 3.8)
project(nori)
SET(CMAKE_CUDA_COMPILER /usr/local/cuda-11.7/bin/nvcc)
enable_language(CUDA)

add_subdirectory(ext ext_build)

#find_package(CUDAToolkit)

include_directories(
  # Nori include files
  ${CMAKE_CURRENT_SOURCE_DIR}/include
  # tinyformat string formatting library
  ${TFM_INCLUDE_DIR}
  # Eigen linear algebra library
  SYSTEM ${EIGEN_INCLUDE_DIR}
  # OpenEXR high dynamic range bitmap library
  SYSTEM ${OPENEXR_INCLUDE_DIRS}
  # Intel Thread Building Blocks
  SYSTEM ${TBB_INCLUDE_DIR}
  #CUDA: Nvidia GPU
  ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES}
  # Pseudorandom number generator
  ${PCG32_INCLUDE_DIR}
  # PugiXML parser
  ${PUGIXML_INCLUDE_DIR}
  # Helper functions for statistical hypothesis tests
  ${HYPOTHESIS_INCLUDE_DIR}
  # GLFW library for OpenGL context creation
  SYSTEM ${GLFW_INCLUDE_DIR}
  # GLEW library for accessing OpenGL functions
  SYSTEM ${GLEW_INCLUDE_DIR}
  # NanoVG drawing library
  SYSTEM ${NANOVG_INCLUDE_DIR}
  # NanoGUI user interface library
  SYSTEM ${NANOGUI_INCLUDE_DIR}
  SYSTEM ${NANOGUI_EXTRA_INCS}
  # Portable filesystem API
  SYSTEM ${FILESYSTEM_INCLUDE_DIR}
  # STB Image Write
  SYSTEM ${STB_IMAGE_WRITE_INCLUDE_DIR}
)

# The following lines build the main executable. If you add a source
# code file to Nori, be sure to include it in this list.
# cuda_add_executable
add_executable(norigpu

# Header files
include/nori/bitmap.h
include/nori/bsdf.h
include/nori/common.h
include/nori/dpdf.h
include/nori/object.h
include/nori/parser.h
include/nori/proplist.h
include/nori/vectorgpu.h
include/nori/raygpu.h 
include/nori/colorgpu.h
include/nori/meshgpu.h
include/nori/bboxgpu.h
include/nori/emittergpu.h
include/nori/emitter.h
include/nori/framegpu.h
include/nori/scenegpu.h
include/nori/integratorgpu.h
include/nori/sampler.h
include/nori/samplergpu.h
include/nori/warpgpu.h
include/nori/blockgpu.h
include/nori/accelbvh.h
include/nori/rfiltergpu.h
include/nori/camera.h
include/nori/cameragpu.h
include/nori/dpdfgpu.h
include/nori/bsdfgpu.h
include/nori/transformgpu.h


# Source code files
src/bitmap.cpp
src/common.cpp
src/obj.cpp
src/object.cpp
src/parser.cpp
src/proplist.cpp
src/gui.cpp
src/main.cu
src/accel.cu

)

add_executable(nori

  # Header files
  include/nori/bbox.h
  include/nori/bitmap.h
  include/nori/block.h
  include/nori/bsdf.h
  include/nori/accel.h
  include/nori/camera.h
  include/nori/color.h
  include/nori/common.h
  include/nori/dpdf.h
  include/nori/frame.h
  include/nori/integrator.h
  include/nori/emitter.h
  include/nori/mesh.h
  include/nori/object.h
  include/nori/parser.h
  include/nori/proplist.h
  include/nori/ray.h
  include/nori/rfilter.h
  include/nori/sampler.h
  include/nori/scene.h
  include/nori/timer.h
  include/nori/transform.h
  include/nori/vector.h
  include/nori/warp.h
  include/nori/simple.h
  include/nori/ao.h
  include/nori/area.h
  include/nori/whitted.h
  include/nori/helpers.h
  include/nori/path_mats.h
  include/nori/path_ems.h
  include/nori/path_mis.h


  # Source code files
  src/bitmap.cpp
  src/block.cpp
  src/accel.cpp
  src/chi2test.cpp
  src/common.cpp
  src/diffuse.cpp
  src/gui.cpp
  src/independent.cpp
  src/main.cpp
  src/mesh.cpp
  src/obj.cpp
  src/object.cpp
  src/parser.cpp
  src/perspective.cpp
  src/proplist.cpp
  src/rfilter.cpp
  src/scene.cpp
  src/ttest.cpp
  src/warp.cpp
  src/microfacet.cpp
  src/mirror.cpp
  src/dielectric.cpp
  src/normals.cpp
  src/simple.cpp
  src/ao.cpp
  src/area.cpp
  src/whitted.cpp
  src/helpers.cpp
  src/path_mats.cpp
  src/path_ems.cpp
  src/path_mis.cpp

)

add_definitions(${NANOGUI_EXTRA_DEFS})

# The following lines build the warping test application
add_executable(warptest
  include/nori/warp.h
  src/warp.cpp
  src/warptest.cpp
  src/microfacet.cpp
  src/object.cpp
  src/proplist.cpp
  src/common.cpp
)

if (WIN32)
  target_link_libraries(nori tbb_static pugixml IlmImf nanogui ${NANOGUI_EXTRA_LIBS} zlibstatic)
  target_link_libraries(norigpu tbb_static pugixml IlmImf nanogui ${NANOGUI_EXTRA_LIBS} zlibstatic rt cuda)
else()
  target_link_libraries(nori tbb_static pugixml IlmImf nanogui ${NANOGUI_EXTRA_LIBS})
  target_link_libraries(norigpu tbb_static pugixml IlmImf nanogui ${NANOGUI_EXTRA_LIBS} rt cuda)
endif()

target_link_libraries(warptest tbb_static nanogui ${NANOGUI_EXTRA_LIBS})

# Force colored output for the ninja generator
if (CMAKE_GENERATOR STREQUAL "Ninja")
  if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fcolor-diagnostics")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fcolor-diagnostics")
  elseif (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fdiagnostics-color=always")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fdiagnostics-color=always")
  elseif (CMAKE_CXX_COMPILER_ID MATCHES "nvcc")
    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} --ptxas-options=-v")
    #set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fdiagnostics-color=always")
    #set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fdiagnostics-color=always")
  endif()
endif()

target_compile_features(warptest PRIVATE cxx_std_17)
target_compile_features(nori PRIVATE cxx_std_17)
target_compile_options(norigpu PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:
                       --generate-line-info
                       --use_fast_math
                       --relocatable-device-code=true>)
#target_compile_features(nori PRIVATE cuda_std_20)

# vim: set et ts=2 sw=2 ft=cmake nospell:
